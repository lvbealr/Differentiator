OPERATOR(OPEN_BRACKET, "(", 0,
	{{}},
	{{}},
	{{}}, {{}}, {{}}, {{}}, {{}}, {{}}, {{}}
	)

OPERATOR(CLOSE_BRACKET, ")", 0,
	{{}},
	{{}},
	{{}}, {{}}, {{}}, {{}}, {{}}, {{}}, {{}}
	)

OPERATOR(POW, "^", 1,
	{evalValue   = pow(EVAL_SUBTREE_(&(*rootNode)->left), EVAL_SUBTREE_(&(*rootNode)->right)); replaceNode(diff, rootNode, CONST_(evalValue));},
	{	if ((*rootNode)->left->data.type != NUMERICAL_NODE && (*rootNode)->right->data.type != NUMERICAL_NODE) {
		currentNode = MUL_(
							EXP_(
								MUL_(COPY_((*rootNode)->right), LN_(COPY_((*rootNode)->left), NULL)), NULL), 
								ADD_(
									MUL_(DIFF_(&(*rootNode)->right), LN_(COPY_((*rootNode)->left), NULL)), 
									MUL_(DIV_(DIFF_(&(*rootNode)->left), COPY_((*rootNode)->left)),
							COPY_((*rootNode)->right))) );
	}

		else if ((*rootNode)->right->data.type == NUMERICAL_NODE) {
			currentNode = MUL_(MUL_(
								COPY_((*rootNode)->right),
								POW_(
									COPY_((*rootNode)->left),
									CONST_((*rootNode)->right->data.nodeValue.value - 1)
									)),
							   DIFF_(&(*rootNode)->left));
		}

		else if ((*rootNode)->left->data.type == NUMERICAL_NODE) {
			currentNode = MUL_(POW_(
									COPY_((*rootNode)->left),
									COPY_((*rootNode)->right)
									),
							   LN_(COPY_((*rootNode)->left), NULL));
		}
	},

	{++(*simplificationsNumber); replaceNode(diff, rootNode, CONST_(0));},
	{++(*simplificationsNumber); replaceNode(diff, rootNode, CONST_(1));},
	{++(*simplificationsNumber); replaceNode(diff, rootNode, CONST_(1));},
	{++(*simplificationsNumber); replaceNode(diff, rootNode, (*rootNode)->left);},
	{{}},
	{++(*simplificationsNumber); replaceNode(diff, rootNode, DIV_(CONST_(1), COPY_((*rootNode)->left)));},
	{
		if (rootNode->left) {
			internalWriteToLatex(diff, rootNode->left, latexStream);
			fprintf(latexStream, "^{");
		}

		if (rootNode->right) {
			internalWriteToLatex(diff, rootNode->right, latexStream);
			fprintf(latexStream, "}");
		}
	}
	)

OPERATOR(SIN, "sin", 2,
	{evalValue   = sin(EVAL_SUBTREE_(&(*rootNode)->left)); replaceNode(diff, rootNode, CONST_(evalValue));},
	{currentNode = MUL_(
				DIFF_(&(*rootNode)->left),
				COS_(COPY_((*rootNode)->left), NULL));},
	{{}}, {{}}, {{}}, {{}}, {{}}, {{}}, {writeUnaryOperation("\\sin", "(", ")");}
	)

OPERATOR(COS, "cos", 2,
	{evalValue   = cos(EVAL_SUBTREE_(&(*rootNode)->left)); replaceNode(diff, rootNode, CONST_(evalValue));},
	{currentNode = MUL_(
				DIFF_(&(*rootNode)->left),
				MUL_(CONST_(-1), SIN_(COPY_((*rootNode)->left), NULL)));},
	{{}}, {{}}, {{}}, {{}}, {{}}, {{}}, {writeUnaryOperation("\\cos", "(", ")");}
	)

OPERATOR(SQRT, "sqrt", 2,
	{evalValue   = sqrt(EVAL_SUBTREE_(&(*rootNode)->left)); replaceNode(diff, rootNode, CONST_(evalValue));},
	{currentNode = DIV_(
				DIFF_(&(*rootNode)->left),
				MUL_(CONST_(2), SQRT_(COPY_((*rootNode)->left), NULL)));},
	{{}}, {{}}, {{}}, {{}}, {{}}, {{}}, {writeUnaryOperation("\\sqrt", "{", "}");}
	)

OPERATOR(LN, "ln", 2,
	{evalValue   = log(EVAL_SUBTREE_(&(*rootNode)->left)); replaceNode(diff, rootNode, CONST_(evalValue));},
	{currentNode = DIV_(DIFF_(&(*rootNode)->left), COPY_((*rootNode)->left));},
	{{}}, {{}}, {{}}, {{}}, {{}}, {{}}, {writeUnaryOperation("\\ln", "(", ")");}
	)

OPERATOR(EXP, "exp", 2,
	{evalValue   = exp(EVAL_SUBTREE_(&(*rootNode)->left)); replaceNode(diff, rootNode, CONST_(evalValue));},
	{currentNode = MUL_(DIFF_(&(*rootNode)->left), EXP_(COPY_((*rootNode)->left), NULL));},
	{{}}, {{}}, {{}}, {{}}, {{}}, {{}}, {writeUnaryOperation("e^", "{", "}");}
	)

OPERATOR(MUL, "*", 3,
	{evalValue   = EVAL_SUBTREE_(&(*rootNode)->left) * EVAL_SUBTREE_(&(*rootNode)->right); replaceNode(diff, rootNode, CONST_(evalValue));},
	{currentNode = ADD_(
				MUL_(DIFF_(&(*rootNode)->left), COPY_((*rootNode)->right)),
				MUL_(COPY_((*rootNode)->left), DIFF_(&(*rootNode)->right)));},
	{++(*simplificationsNumber); replaceNode(diff, rootNode, CONST_(0));},
	{++(*simplificationsNumber); replaceNode(diff, rootNode, CONST_(0));},
	{++(*simplificationsNumber); replaceNode(diff, rootNode, (*rootNode)->right);},
	{++(*simplificationsNumber); replaceNode(diff, rootNode, (*rootNode)->left);},
	{{}},
	{{}},
	{writeBinaryOperation(" \\cdot ");}
	)

OPERATOR(DIV, "/", 3,
	{evalValue   = EVAL_SUBTREE_(&(*rootNode)->left) / EVAL_SUBTREE_(&(*rootNode)->right); replaceNode(diff, rootNode, CONST_(evalValue));},
	{currentNode = DIV_(
				SUB_(
				MUL_(DIFF_(&(*rootNode)->left), COPY_((*rootNode)->right)),
				MUL_(COPY_((*rootNode)->left), DIFF_(&(*rootNode)->right))),
				POW_(COPY_((*rootNode)->right), CONST_(2)));},
	{++(*simplificationsNumber); replaceNode(diff, rootNode, CONST_(0));},
	{{}},
	{{}},
	{++(*simplificationsNumber); replaceNode(diff, rootNode, (*rootNode)->left);},
	{{}},
	{++(*simplificationsNumber); replaceNode(diff, rootNode, MUL_(CONST_(-1), COPY_((*rootNode)->left)));},
	{
		fprintf(latexStream, "\\frac{");
		if (rootNode->left) {
			internalWriteToLatex(diff, rootNode->left, latexStream);
		}
		
		fprintf(latexStream, "}{");
		if (rootNode->right) {
			internalWriteToLatex(diff, rootNode->right, latexStream);
		}
		fprintf(latexStream, "}");
	}
	)

OPERATOR(ADD, "+", 4,
	{evalValue   = EVAL_SUBTREE_(&(*rootNode)->left) + EVAL_SUBTREE_(&(*rootNode)->right); replaceNode(diff, rootNode, CONST_(evalValue));},
	{currentNode = ADD_(
				DIFF_(&(*rootNode)->left), DIFF_(&(*rootNode)->right));},
	{++(*simplificationsNumber); replaceNode(diff, rootNode, (*rootNode)->right);},
	{++(*simplificationsNumber); replaceNode(diff, rootNode, (*rootNode)->left);},
	{{}},
	{{}},
	{{}},
	{{}},
	{writeBinaryOperation(" + ");}
	)

OPERATOR(SUB, "-", 4,
	{evalValue   = EVAL_SUBTREE_(&(*rootNode)->left) - EVAL_SUBTREE_(&(*rootNode)->right); replaceNode(diff, rootNode, CONST_(evalValue));},
	{currentNode = SUB_(
				DIFF_(&(*rootNode)->left), DIFF_(&(*rootNode)->right));},
	{++(*simplificationsNumber); replaceNode(diff, rootNode, MUL_(CONST_(-1), COPY_((*rootNode)->right)));},
	{++(*simplificationsNumber); replaceNode(diff, rootNode, (*rootNode)->left);},
	{{}},
	{{}},
	{{}},
	{{}},
	{writeBinaryOperation(" - ");}
	)

OPERATOR(EQUALS, "=", 4,
	{evalValue   = EVAL_SUBTREE_(&(*rootNode)->left); replaceNode(diff, rootNode, CONST_(evalValue));},
	{currentNode = OPERATION_NODE_(DIFF_(&(*rootNode)->left), NULL, EQUALS);},
	{{}}, {{}}, {{}}, {{}}, {{}}, {{}}, {{}}
	)
