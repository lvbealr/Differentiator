#include "supDefines.def"

// OPERATOR(NAME, SYMBOL, PRIORITY, EVAL_FUNCTION, DIFF_FUNCTION, 	    LEFT_ZERO_SIMPLIFICATION,
//																  	   RIGHT_ZERO_SIMPLIFICATION,
//																  		 LEFT_ONE_SIMPLIFICATION,
//																   	    RIGHT_ONE_SIMPLIFICATION,
// 																   	 LEFT_NEG_ONE_SIMPLIFICATION,
// 																  	RIGHT_NEG_ONE_SIMPLIFICATION,
//																  				  LATEX_FUNCTION)

OPERATOR(OPEN_BRACKET, "(", 0,
	{NONE;},
	{NONE;},
	{NONE;},
	{NONE;},
	{NONE;},
	{NONE;},
	{NONE;},
	{NONE;},
	{NONE;}
	)

OPERATOR(CLOSE_BRACKET, ")", 0,
	{NONE;},
	{NONE;},
	{NONE;},
	{NONE;},
	{NONE;},
	{NONE;},
	{NONE;},
	{NONE;},
	{NONE;}
	)

OPERATOR(POW, "^", 1,
	EVAL   {evalValue   = pow(EVAL_SUBTREE_(&LEFT_P), EVAL_SUBTREE_(&RIGHT_P)); replaceNode(diff, rootNode, CONST_(evalValue));},
	DIFF   {if (LEFT_P->data.type != NUMERICAL_NODE && RIGHT_P->data.type != NUMERICAL_NODE) {
			currentNode = MUL_(
								EXP_(
									MUL_(COPY_(RIGHT_P), LN_(COPY_(LEFT_P), NULL)), NULL), 
									ADD_(
										MUL_(DIFF_(&RIGHT_P), LN_(COPY_(LEFT_P), NULL)), 
										MUL_(DIV_(DIFF_(&LEFT_P), COPY_(LEFT_P)),
								COPY_(RIGHT_P))) );
			}

			else if (RIGHT_P->data.type == NUMERICAL_NODE) {
				currentNode = MUL_(MUL_(
									COPY_(RIGHT_P),
									POW_(
										COPY_(LEFT_P),
										CONST_(RIGHT_P->data.nodeValue.value - 1)
										)),
								   DIFF_(&LEFT_P));
			}

			else if (LEFT_P->data.type == NUMERICAL_NODE) {
				currentNode = MUL_(POW_(
										COPY_(LEFT_P),
										COPY_(RIGHT_P)
										),
								   LN_(COPY_(LEFT_P), NULL));
			}
	},

	LEFT_0 		{I_MADE_CHANGES;    replaceNode(diff, rootNode, CONST_(0));						},
	RIGHT_0 	{YOU_MADE_CHANGES;  replaceNode(diff, rootNode, CONST_(1));						},
	LEFT_1 		{HE_MADE_CHANGES;   replaceNode(diff, rootNode, CONST_(1));						},
	RIGHT_1 	{SHE_MADE_CHANGES;  replaceNode(diff, rootNode, LEFT_P);					    },
	LEFT_NEG_1  {NONE;																			},
	RIGHT_NEG_1 {THEY_MADE_CHANGES; replaceNode(diff, rootNode, DIV_(CONST_(1), COPY_(LEFT_P)));},

	LATEX {
			if (LEFT_N) {
				T_PRINT(LEFT_N);
				L_PRINT("^{");
			}

			if (RIGHT_N) {
				T_PRINT(RIGHT_N);
				L_PRINT("}");
			}
		})

OPERATOR(SIN, "sin", 2,
	EVAL {evalValue   = sin(EVAL_SUBTREE_(&LEFT_P)); replaceNode(diff, rootNode, CONST_(evalValue));},
	DIFF {currentNode = MUL_(
							DIFF_(&LEFT_P),
							COS_(COPY_(LEFT_P), NULL));},

	LEFT_0      { NONE;					      },
	RIGHT_0     { NONE;					      },
	LEFT_1      { NONE;					      },
	RIGHT_1     { NONE;					      },
	LEFT_NEG_1  { NONE;					      },
	RIGHT_NEG_1 { NONE;					      },

	LATEX 		{ L_UNARY("\\sin", "(", ")"); }
	)


OPERATOR(COS, "cos", 2,
	EVAL {evalValue   = cos(EVAL_SUBTREE_(&LEFT_P)); replaceNode(diff, rootNode, CONST_(evalValue));},
	DIFF {currentNode = MUL_(
							DIFF_(&LEFT_P),
			  				MUL_(CONST_(-1), SIN_(COPY_(LEFT_P), NULL)));},

	LEFT_0      { NONE;					      },
	RIGHT_0     { NONE;					      },
	LEFT_1      { NONE;					      },
	RIGHT_1     { NONE;					      },
	LEFT_NEG_1  { NONE;					      },
	RIGHT_NEG_1 { NONE;					      },

	LATEX 		{ L_UNARY("\\cos", "(", ")"); }
	)

OPERATOR(SQRT, "sqrt", 2,
	EVAL {evalValue   = sqrt(EVAL_SUBTREE_(&LEFT_P)); replaceNode(diff, rootNode, CONST_(evalValue));},
	DIFF {currentNode = DIV_(
							DIFF_(&LEFT_P),
							MUL_(CONST_(2), SQRT_(COPY_(LEFT_P), NULL)));},

	LEFT_0      { NONE;					      },
	RIGHT_0     { NONE;					      },
	LEFT_1      { NONE;					      },
	RIGHT_1     { NONE;					      },
	LEFT_NEG_1  { NONE;					      },
	RIGHT_NEG_1 { NONE;					      },

	LATEX 		{ L_UNARY("\\sqrt", "{", "}");}
	)

OPERATOR(LN, "ln", 2,
	EVAL {evalValue   = log(EVAL_SUBTREE_(&(*rootNode)->left)); replaceNode(diff, rootNode, CONST_(evalValue));},
	DIFF {currentNode = DIV_(DIFF_(&(*rootNode)->left), COPY_((*rootNode)->left));},

	LEFT_0      { NONE;					    },
	RIGHT_0     { NONE;					    },
	LEFT_1      { NONE;					    },
	RIGHT_1     { NONE;					    },
	LEFT_NEG_1  { NONE;					    },
	RIGHT_NEG_1 { NONE;					    },

	LATEX 		{ L_UNARY("\\ln", "(", ")");}
	)

OPERATOR(EXP, "exp", 2,
	EVAL {evalValue   = exp(EVAL_SUBTREE_(&(*rootNode)->left)); replaceNode(diff, rootNode, CONST_(evalValue));},
	DIFF {currentNode = MUL_(DIFF_(&(*rootNode)->left), EXP_(COPY_((*rootNode)->left), NULL));},

	LEFT_0      { NONE;					  },
	RIGHT_0     { NONE;					  },
	LEFT_1      { NONE;					  },
	RIGHT_1     { NONE;					  },
	LEFT_NEG_1  { NONE;					  },
	RIGHT_NEG_1 { NONE;					  },

	LATEX 		{ L_UNARY("e^", "{", "}");}
	)

OPERATOR(MUL, "*", 3,
	EVAL {evalValue   = EVAL_SUBTREE_(&LEFT_P) * EVAL_SUBTREE_(&RIGHT_P); replaceNode(diff, rootNode, CONST_(evalValue));},
	DIFF {currentNode = ADD_(
							MUL_(DIFF_(&LEFT_P), COPY_(RIGHT_P)),
							MUL_(COPY_(LEFT_P), DIFF_(&RIGHT_P)));},

	LEFT_0      { I_MADE_CHANGES;   replaceNode(diff, rootNode, CONST_(0));			},
	RIGHT_0     { YOU_MADE_CHANGES; replaceNode(diff, rootNode, CONST_(0));			},
	LEFT_1      { HE_MADE_CHANGES;  replaceNode(diff, rootNode, RIGHT_P);			},
	RIGHT_1     { SHE_MADE_CHANGES; replaceNode(diff, rootNode, LEFT_P);		    },
	LEFT_NEG_1  { NONE;			      												},
	RIGHT_NEG_1 { NONE;			      												},

	LATEX 		{ L_BINARY(" \\cdot "); 											})

OPERATOR(DIV, "/", 3,
	EVAL {evalValue   = EVAL_SUBTREE_(&LEFT_P) / EVAL_SUBTREE_(&RIGHT_P); replaceNode(diff, rootNode, CONST_(evalValue));},
	
	DIFF {currentNode = DIV_(
							SUB_(
							MUL_(DIFF_(&LEFT_P), COPY_(RIGHT_P)),
							MUL_(COPY_(LEFT_P),  DIFF_(&RIGHT_P))),
							POW_(COPY_(LEFT_P),  CONST_(2)));},
	
	LEFT_0      { I_MADE_CHANGES;    replaceNode(diff, rootNode, CONST_(0));					  },
	RIGHT_0     { NONE; 																		  },
	LEFT_1      { NONE; 																		  },
	RIGHT_1     { SHE_MADE_CHANGES;  replaceNode(diff, rootNode, LEFT_P);					      },
	LEFT_NEG_1  { NONE; 																		  },
	RIGHT_NEG_1 { THEY_MADE_CHANGES; replaceNode(diff, rootNode, MUL_(CONST_(-1), COPY_(LEFT_P)));},
	
	LATEX {
		L_PRINT ("\\frac{");

		if (LEFT_N) {
			T_PRINT (LEFT_N);
		}
		
		L_PRINT ("}{");

		if (RIGHT_N) {
			T_PRINT (RIGHT_N);
		}

		L_PRINT ("}");
	})

OPERATOR(ADD, "+", 4,
	EVAL {evalValue   = EVAL_SUBTREE_(&LEFT_P) + EVAL_SUBTREE_(&RIGHT_P); replaceNode(diff, rootNode, CONST_(evalValue));},
	DIFF {currentNode = ADD_(DIFF_(&LEFT_P), DIFF_(&RIGHT_P));},

	LEFT_0   	{I_MADE_CHANGES;   replaceNode(diff, rootNode, RIGHT_P);},
	RIGHT_0  	{YOU_MADE_CHANGES; replaceNode(diff, rootNode, LEFT_P); },
	LEFT_1   	{NONE;													},
	RIGHT_1  	{NONE;													},
	LEFT_NEG_1  {NONE;													},
	RIGHT_NEG_1 {NONE;													},
	
	LATEX 		{L_BINARY(" + ");						    			})

OPERATOR(SUB, "-", 4,
	EVAL {evalValue   = EVAL_SUBTREE_(&LEFT_P) - EVAL_SUBTREE_(&RIGHT_P); replaceNode(diff, rootNode, CONST_(evalValue));},
	DIFF {currentNode = SUB_(DIFF_(&LEFT_P), DIFF_(&RIGHT_P));},

	LEFT_0 		{I_MADE_CHANGES;   replaceNode(diff, rootNode, MUL_(CONST_(-1), COPY_(RIGHT_P)));},
	RIGHT_0		{YOU_MADE_CHANGES; replaceNode(diff, rootNode, LEFT_P);							 },
	LEFT_1      {NONE;																		     },
	RIGHT_1		{NONE;																		     },
	LEFT_NEG_1  {NONE;																		     },
	RIGHT_NEG_1 {NONE;																		     },

	LATEX 	 	{L_BINARY(" - ");																 }
	)

OPERATOR(EQUALS, "=", 4,
	EVAL {evalValue   = EVAL_SUBTREE_(&LEFT_P); replaceNode(diff, rootNode, CONST_(evalValue));},
	DIFF {currentNode = OPERATION_NODE_(DIFF_(&LEFT_P), NULL, EQUALS);},

	LEFT_0      {NONE;},
	RIGHT_0     {NONE;},
	LEFT_1      {NONE;},
	RIGHT_1     {NONE;},
	LEFT_NEG_1  {NONE;},
	RIGHT_NEG_1 {NONE;},

	LATEX       {NONE;}
	)
